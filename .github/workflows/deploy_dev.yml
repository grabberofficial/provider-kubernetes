name: Deploy Dev

on:
  push:
    branches:
      - main
      - release-*
  pull_request: {}
  workflow_dispatch: {}

env:
  # Common versions
  GO_VERSION: '1.16'
  GOLANGCI_VERSION: 'v1.31'
  DOCKER_BUILDX_VERSION: 'v0.4.2'
  ECR: 636334651895.dkr.ecr.eu-central-1.amazonaws.com/polkapad-provider-kubernetes
  ROLE: "arn:aws:iam::636334651895:role/github-ecr-polkapad-provider-kubernetes"

jobs:

  publish-artifacts:
    runs-on: ubuntu-18.04
    permissions:
      id-token: write # required to use OIDC authentication
      contents: read # required to checkout the code from the repo
    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: ${{ env.DOCKER_BUILDX_VERSION }}
          install: true

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Find the Go Build Cache
        id: go
        run: echo "::set-output name=cache::$(go env GOCACHE)"

      - name: Cache the Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go.outputs.cache }}
          key: ${{ runner.os }}-build-publish-artifacts-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-build-publish-artifacts-

      - name: Cache Go Dependencies
        uses: actions/cache@v2
        with:
          path: .work/pkg
          key: ${{ runner.os }}-pkg-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-pkg-

      - name: Vendor Dependencies
        run: make vendor vendor.check

      - name: Build Artifacts
        run: make -j2 build.all
        env:
          # We're using docker buildx, which doesn't actually load the images it
          # builds by default. Specifying --load does so.
          BUILD_ARGS: "--load"
      

      - name: Get images
        run: |
          docker image ls
          export PROVIDER_IMAGE=$(docker image ls | grep provider-kubernetes-amd64 | awk '{print $1}')
          echo "PROVIDER_IMAGE=${PROVIDER_IMAGE}" >> $GITHUB_ENV

      - name: Expose git commit data
        uses: rlespinasse/git-commit-data-action@v1

      - name: Change tag
        run: |
          docker tag "${PROVIDER_IMAGE}:latest" "${ECR}:${{ env.GIT_COMMIT_SHORT_SHA }}"

      - name: AWS cli install action
        uses: chrislennon/action-aws-cli@1.1

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.ROLE }}
          role-duration-seconds: 900 # the ttl of the session, in seconds.
          aws-region: eu-central-1 # use your region here.

      - name: ECR login
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR

      - name: Push image
        run: |
          docker push "${ECR}:${{ env.GIT_COMMIT_SHORT_SHA }}"
